/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { Logic2, Logic2Interface } from "../Logic2";

const _abi = [
  {
    inputs: [],
    name: "admin",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "foo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "implementation",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "words",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061062f806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80635c60da1b14610051578063c29855781461006f578063f2c31bd914610079578063f851a44014610097575b600080fd5b6100596100b5565b6040516100669190610215565b60405180910390f35b6100776100d9565b005b610081610120565b60405161008e91906102c0565b60405180910390f35b61009f6101ae565b6040516100ac9190610215565b60405180910390f35b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040518060400160405280600381526020017f6e657700000000000000000000000000000000000000000000000000000000008152506002908161011d9190610527565b50565b6002805461012d90610340565b80601f016020809104026020016040519081016040528092919081815260200182805461015990610340565b80156101a65780601f1061017b576101008083540402835291602001916101a6565b820191906000526020600020905b81548152906001019060200180831161018957829003601f168201915b505050505081565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006101ff826101d4565b9050919050565b61020f816101f4565b82525050565b600060208201905061022a6000830184610206565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561026a57808201518184015260208101905061024f565b60008484015250505050565b6000601f19601f8301169050919050565b600061029282610230565b61029c818561023b565b93506102ac81856020860161024c565b6102b581610276565b840191505092915050565b600060208201905081810360008301526102da8184610287565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061035857607f821691505b60208210810361036b5761036a610311565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026103d37fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610396565b6103dd8683610396565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600061042461041f61041a846103f5565b6103ff565b6103f5565b9050919050565b6000819050919050565b61043e83610409565b61045261044a8261042b565b8484546103a3565b825550505050565b600090565b61046761045a565b610472818484610435565b505050565b5b818110156104965761048b60008261045f565b600181019050610478565b5050565b601f8211156104db576104ac81610371565b6104b584610386565b810160208510156104c4578190505b6104d86104d085610386565b830182610477565b50505b505050565b600082821c905092915050565b60006104fe600019846008026104e0565b1980831691505092915050565b600061051783836104ed565b9150826002028217905092915050565b61053082610230565b67ffffffffffffffff811115610549576105486102e2565b5b6105538254610340565b61055e82828561049a565b600060209050601f831160018114610591576000841561057f578287015190505b610589858261050b565b8655506105f1565b601f19841661059f86610371565b60005b828110156105c7578489015182556001820191506020850194506020810190506105a2565b868310156105e457848901516105e0601f8916826104ed565b8355505b6001600288020188555050505b50505050505056fea2646970667358221220797f6ddcdd146dc39ba3641e22f502ebc7b9763a9e91748d94c6bdaf88c209ff64736f6c63430008120033";

type Logic2ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Logic2ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Logic2__factory extends ContractFactory {
  constructor(...args: Logic2ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Logic2> {
    return super.deploy(overrides || {}) as Promise<Logic2>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Logic2 {
    return super.attach(address) as Logic2;
  }
  override connect(signer: Signer): Logic2__factory {
    return super.connect(signer) as Logic2__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Logic2Interface {
    return new utils.Interface(_abi) as Logic2Interface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Logic2 {
    return new Contract(address, _abi, signerOrProvider) as Logic2;
  }
}
